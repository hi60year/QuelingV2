// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/99designs/gqlgen/graphql"
)

type RankingInfo interface {
	IsRankingInfo()
}

type TeamRegistrationError interface {
	IsTeamRegistrationError()
}

type InviteCodeNotMatchError struct {
	Msg string `json:"msg"`
}

func (InviteCodeNotMatchError) IsTeamRegistrationError() {}

type MahjongSoulRankingInfo struct {
	Ranking3 *int `json:"ranking3,omitempty"`
	Ranking4 *int `json:"ranking4,omitempty"`
}

func (MahjongSoulRankingInfo) IsRankingInfo() {}

type MaxTeamMemberExceededError struct {
	MaxTeamMember int    `json:"maxTeamMember"`
	Msg           string `json:"msg"`
}

func (MaxTeamMemberExceededError) IsTeamRegistrationError() {}

type PlatformInfo struct {
	Platform    Platform    `json:"platform"`
	Name        string      `json:"name"`
	UID         *string     `json:"uid,omitempty"`
	RankingInfo RankingInfo `json:"rankingInfo,omitempty"`
}

type PlatformInfoPayload struct {
	Name            string  `json:"name"`
	UID             *string `json:"uid,omitempty"`
	Ranking3        *int    `json:"ranking3,omitempty"`
	Ranking4        *int    `json:"ranking4,omitempty"`
	Pt3             *int    `json:"pt3,omitempty"`
	Pt4             *int    `json:"pt4,omitempty"`
	R3              *int    `json:"r3,omitempty"`
	R4              *int    `json:"r4,omitempty"`
	RankingInfoType string  `json:"rankingInfoType"`
}

type PlayerPayload struct {
	Name          string                 `json:"name"`
	PlatformInfos []*PlatformInfoPayload `json:"platformInfos"`
	Appendix      *graphql.Upload        `json:"appendix,omitempty"`
	ExtraInfo     map[string]interface{} `json:"extraInfo,omitempty"`
}

type TeamNameAlreadyExistError struct {
	Name string `json:"name"`
	Msg  string `json:"msg"`
}

func (TeamNameAlreadyExistError) IsTeamRegistrationError() {}

type TeamRegistrationPayload struct {
	Name        string                 `json:"name"`
	Players     []*PlayerPayload       `json:"players"`
	LeaderIndex *int                   `json:"leaderIndex,omitempty"`
	ContestID   string                 `json:"contestId"`
	ExtraInfo   map[string]interface{} `json:"extraInfo,omitempty"`
}

type TeamRegistrationResult struct {
	TeamID            *string               `json:"teamId,omitempty"`
	AuthorizationCode *string               `json:"authorizationCode,omitempty"`
	Error             TeamRegistrationError `json:"error,omitempty"`
}

type TenhouRankingInfo struct {
	Ranking3 *int `json:"ranking3,omitempty"`
	Ranking4 *int `json:"ranking4,omitempty"`
}

func (TenhouRankingInfo) IsRankingInfo() {}

type ContestStatus string

const (
	ContestStatusRegistering ContestStatus = "Registering"
	ContestStatusHolding     ContestStatus = "Holding"
	ContestStatusEnd         ContestStatus = "End"
)

var AllContestStatus = []ContestStatus{
	ContestStatusRegistering,
	ContestStatusHolding,
	ContestStatusEnd,
}

func (e ContestStatus) IsValid() bool {
	switch e {
	case ContestStatusRegistering, ContestStatusHolding, ContestStatusEnd:
		return true
	}
	return false
}

func (e ContestStatus) String() string {
	return string(e)
}

func (e *ContestStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContestStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContestStatus", str)
	}
	return nil
}

func (e ContestStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MahjongType string

const (
	MahjongTypeCom    MahjongType = "COM"
	MahjongTypeRiichi MahjongType = "Riichi"
)

var AllMahjongType = []MahjongType{
	MahjongTypeCom,
	MahjongTypeRiichi,
}

func (e MahjongType) IsValid() bool {
	switch e {
	case MahjongTypeCom, MahjongTypeRiichi:
		return true
	}
	return false
}

func (e MahjongType) String() string {
	return string(e)
}

func (e *MahjongType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MahjongType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MahjongType", str)
	}
	return nil
}

func (e MahjongType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Platform string

const (
	PlatformMahjongsoul Platform = "Mahjongsoul"
	PlatformTenhou      Platform = "Tenhou"
	PlatformTziakcha    Platform = "Tziakcha"
)

var AllPlatform = []Platform{
	PlatformMahjongsoul,
	PlatformTenhou,
	PlatformTziakcha,
}

func (e Platform) IsValid() bool {
	switch e {
	case PlatformMahjongsoul, PlatformTenhou, PlatformTziakcha:
		return true
	}
	return false
}

func (e Platform) String() string {
	return string(e)
}

func (e *Platform) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Platform(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Platform", str)
	}
	return nil
}

func (e Platform) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TeamStatus string

const (
	TeamStatusEditing  TeamStatus = "Editing"
	TeamStatusAccepted TeamStatus = "Accepted"
	TeamStatusRejected TeamStatus = "Rejected"
	TeamStatusPending  TeamStatus = "Pending"
)

var AllTeamStatus = []TeamStatus{
	TeamStatusEditing,
	TeamStatusAccepted,
	TeamStatusRejected,
	TeamStatusPending,
}

func (e TeamStatus) IsValid() bool {
	switch e {
	case TeamStatusEditing, TeamStatusAccepted, TeamStatusRejected, TeamStatusPending:
		return true
	}
	return false
}

func (e TeamStatus) String() string {
	return string(e)
}

func (e *TeamStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TeamStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TeamStatus", str)
	}
	return nil
}

func (e TeamStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
